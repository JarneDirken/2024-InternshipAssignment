generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int           @id @default(autoincrement())
  roleId               Int
  firebaseUid          String        @unique
  firstName            String
  lastName             String
  email                String        @unique
  studentCode          String        @unique @db.Char(8)
  tel                  String        @unique
  active               Boolean       @default(true)
  createdAt            DateTime      @default(now())
  profilePic           String?
  //relation
  role                 Role          @relation(fields: [roleId], references: [id])
  ItemRequestsBorrower ItemRequest[] @relation("borrower")
  ItemRequestsApprover ItemRequest[] @relation("approver")
}

model Role {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  //relation
  Users     User[]
  RoleItems RoleItem[]
}

model RoleItem {
  id     Int  @id @default(autoincrement())
  roleId Int
  itemId Int
  // relation
  role   Role @relation(fields: [roleId], references: [id])
  item   Item @relation(fields: [itemId], references: [id])
}

model Item {
  id           Int           @id @default(autoincrement())
  locationId   Int
  itemStatusId Int           @default(1)
  name         String
  model        String
  brand        String
  image        String?
  yearBought   DateTime?
  active       Boolean       @default(true)
  number       String        @unique //Number that Dio uses in excel
  notes        String?
  schoolNumber String?       @unique //Number of specific item schoolnumber
  consumable   Boolean       @default(false)
  amount       Int?
  // relation
  location     Location      @relation(fields: [locationId], references: [id])
  itemStatus   ItemStatus    @relation(fields: [itemStatusId], references: [id])
  Reparations  Reparation[]
  ItemRequests ItemRequest[]
  RoleItem     RoleItem[]
}

model ItemStatus {
  id    Int    @id @default(autoincrement())
  name  String @unique
  // relation
  Items Item[]
}

model Location {
  id    Int    @id @default(autoincrement())
  name  String @unique
  // relation
  Items Item[]
}

model Reparation {
  id         Int      @id @default(autoincrement())
  itemId     Int
  repairDate DateTime
  returnDate DateTime
  notes      String
  // relation
  item       Item     @relation(fields: [itemId], references: [id])
}

model RequestStatus {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  // relation
  ItemRequests ItemRequest[]
}

model ItemRequest {
  id              Int           @id @default(autoincrement())
  itemId          Int
  requestStatusId Int
  borrowerId      Int
  approverId      Int
  requestDate     DateTime
  starBorrowDate  DateTime
  endBorrowDate   DateTime
  decisionDate    DateTime?
  borrowDate      DateTime?
  returnDate      DateTime?
  file            String?
  receiveMessage  String?
  approveMessage  String?
  isUrgent        Boolean       @default(false)
  amountRequest   Int?
  // relation
  item            Item          @relation(fields: [itemId], references: [id])
  requestStatus   RequestStatus @relation(fields: [requestStatusId], references: [id])
  borrower        User          @relation("borrower", fields: [borrowerId], references: [id])
  approver        User?         @relation("approver", fields: [approverId], references: [id])
}

model Parameter {
  id    Int    @id @default(autoincrement())
  name  String @unique
  value String
}
